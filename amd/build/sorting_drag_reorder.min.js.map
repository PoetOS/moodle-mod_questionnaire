{"version":3,"file":"sorting_drag_reorder.min.js","sources":["../src/sorting_drag_reorder.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * Generic library to allow things in a vertical list to be re-ordered using drag and drop.\n *\n * To make a set of things draggable, create a new instance of this object passing the\n * necessary config, as explained in the comment on the constructor.\n *\n * @package   mod_questionnaire\n * @copyright 2023 The Open University\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * @module questionnaire/sorting_drag_reorder\n */\ndefine([\n    'jquery',\n    'core/dragdrop',\n    'core/key_codes'\n], function(\n    $,\n    drag,\n    keys\n) {\n\n    /**\n     * Constructor.\n     *\n     * To make a list draggable, create a new instance of this object, passing the necessary config.\n     * For example:\n     * {\n     *      // Selector for the list (or lists) to be reordered.\n     *      list: 'ul.my-list',\n     *\n     *      // Selector, relative to the list selector, for the items that can be moved.\n     *      item: '> li',\n     *\n     *      // The user actually drags a proxy object, which is constructed from this string,\n     *      // and then added directly as a child of <body>. The token %%ITEM_HTML%% is\n     *      // replaced with the innerHtml of the item being dragged. The token %%ITEM_CLASS_NAME%%\n     *      // is replaced with the class attribute of the item being dragged. Because of this,\n     *      // the styling of the contents of your list item needs to work for the proxy, as well as\n     *      // for items in place in the context of the list. Your CSS also needs to ensure\n     *      // that this proxy has position: absolute. You probably want other styles, like a\n     *      // drop shadow. Using class osep-itemmoving might be all you need to do.\n     *      proxyHtml: '<div class=\"osep-itemmoving %%ITEM_CLASS_NAME%%\">%%ITEM_HTML%%</div>,\n     *\n     *      // While the proxy is being dragged, this class is added to the item being moved.\n     *      // You can probably use \"some-class\" here.\n     *      itemMovingClass: \"some-class\",\n     *\n     *      // This is a callback which, when called with the DOM node for an item,\n     *      // returns the string that uniquely identifies each item.\n     *      // Therefore, the result of the drag action will be represented by the array\n     *      // obtained by calling this method on each item in the list in order.\n     *      idGetter: function(item) { return $(node).data('id'); },\n     *\n     *      // This is a callback which, when called with the DOM node for an item,\n     *      // returns a string that is the name of the item.\n     *      nameGetter: function(item) { return $(node).text(); },\n     *\n     *      // Function that will be called when a re-order starts (optional, can be not set).\n     *      // Useful if you need to save information about the initial state.\n     *      // This function should have two parameters. The first will be a\n     *      // jQuery object for the list that was reordered, the second will\n     *      // be the jQuery object for the item moved - which will not yet have been moved.\n     *      // Note, it is quite possible for reorderStart to be called with no\n     *      // subsequent call to reorderDone.\n     *      reorderStart: function($list, $item) { ... }\n     *\n     *      // Function that will be called when a drag has finished, and the list\n     *      // has been reordered. This function should have three parameters. The first will be\n     *      // a jQuery object for the list that was reordered, the second will be the jQuery\n     *      // object for the item moved, and the third will be the new order, which is\n     *      // an array of ids obtained by calling idGetter on each item in the list in order.\n     *      // This callback will only be called in the new order is actually different from the old order.\n     *      reorderDone: function($list, $item, newOrder) { ... }\n     *\n     *      // Function that is always called when a re-order ends (optional, can be not set)\n     *      // whether the order has changed. Useful if you need to undo changes made\n     *      // in reorderStart, since reorderDone is only called if the new order is different\n     *      // from the original order.\n     *      reorderEnd: function($list, $item) { ... }\n     *  }\n     *\n     * There is a subtlety ( === hack?) that you can use. If you have items in your list that do not\n     * have a drag handle, they are considered to be placeholders in otherwise empty containers.\n     * See how block_userlinks does it, if this seems like it might be useful. nameGetter should return\n     * the container name for these items.\n     *\n     * @param {Object} config As above.\n     */\n    return function(config) {\n        var dragStart = null, // Information about when and where the drag started.\n            originalOrder = null, // Array of ids.\n            itemDragging = null, // Item being moved by dragging (jQuery object).\n            itemMoving = null, // Item being moved using the accessible modal (jQuery object).\n            proxy = null, // Drag proxy (jQuery object).\n            orderList = null; // Order list (jQuery object).\n\n        var startDrag = function(event, details) {\n            orderList = $(config.list);\n\n            dragStart = {\n                time: new Date().getTime(),\n                x: details.x,\n                y: details.y\n            };\n\n            itemDragging = $(event.currentTarget).closest(config.itemInPage);\n\n            if (typeof config.reorderStart !== 'undefined') {\n                config.reorderStart(itemDragging.closest(config.list), itemDragging);\n            }\n\n            originalOrder = getCurrentOrder();\n            proxy = $(config.proxyHtml.replace('%%ITEM_HTML%%', itemDragging.html())\n                .replace('%%ITEM_CLASS_NAME%%', itemDragging.attr('class'))\n                .replace('%%LIST_CLASS_NAME%%', orderList.attr('class')));\n\n            $(document.body).append(proxy);\n            proxy.css('position', 'absolute');\n            proxy.css(itemDragging.offset());\n            proxy.width(itemDragging.outerWidth());\n            proxy.height(itemDragging.outerHeight());\n            itemDragging.addClass(config.itemMovingClass);\n            updateProxy(itemDragging);\n\n            // Start drag.\n            drag.start(event, proxy, dragMove, dragEnd);\n        };\n\n        var dragMove = function() {\n            var list = itemDragging.closest(config.list);\n            var closestItem = null;\n            var closestDistance = null;\n            list.find(config.item).each(function(index, element) {\n                var distance = distanceBetweenElements(element, proxy);\n                if (closestItem === null || distance < closestDistance) {\n                    closestItem = $(element);\n                    closestDistance = distance;\n                }\n            });\n\n            if (closestItem[0] === itemDragging[0]) {\n                return;\n            }\n            var offsetValue = 0;\n            // Set offset depending on if item is being dragged downwards/upwards.\n            if (midY(proxy) < midY(closestItem)) {\n                offsetValue = 20;\n                window.console.log(\"For midY(proxy) < midY(closestItem) offset is: \" + offsetValue);\n            } else {\n                offsetValue = -20;\n                window.console.log(\"For midY(proxy) < midY(closestItem) offset is: \" + offsetValue);\n            }\n           if (midY(proxy) + offsetValue < midY(closestItem)) {\n                itemDragging.insertBefore(closestItem);\n            } else {\n                itemDragging.insertAfter(closestItem);\n            }\n            updateProxy(itemDragging);\n        };\n\n        /**\n         * Update proxy's position.\n         * @param {jQuery} itemDragging\n         */\n        var updateProxy = function(itemDragging) {\n            var list = itemDragging.closest('ol, ul');\n            var items = list.find('li');\n            var count = items.length;\n            for (var i = 0; i < count; ++i) {\n                if (itemDragging[0] === items[i]) {\n                    proxy.find('li').attr('value', i + 1);\n                    break;\n                }\n            }\n        };\n\n        /**\n         * It outer and inner are two CSS selectors, which may contain commas,\n         * then combine them safely. So combineSelectors('a, b', 'c, d')\n         * gives 'a c, a d, b c, b d'.\n         * @param {Selector} outer\n         * @param {Selector} inner\n         * @returns {string}\n         */\n        var combineSelectors = function(outer, inner) {\n            var combined = [];\n            outer.split(',').forEach(function(firstSelector) {\n                inner.split(',').forEach(function(secondSelector) {\n                    combined.push(firstSelector.trim() + ' ' + secondSelector.trim());\n                });\n            });\n            return combined.join(', ');\n        };\n\n        var dragEnd = function(x, y) {\n            if (typeof config.reorderEnd !== 'undefined') {\n                config.reorderEnd(itemDragging.closest(config.list), itemDragging);\n            }\n\n            var newOrder = getCurrentOrder();\n            if (!arrayEquals(originalOrder, newOrder)) {\n                // Order has changed, call the callback.\n                config.reorderDone(itemDragging.closest(config.list), itemDragging, newOrder);\n            } else if (new Date().getTime() - dragStart.time < 500 &&\n                Math.abs(dragStart.x - x) < 10 && Math.abs(dragStart.y - y) < 10) {\n                // This was really a click. Set the focus on the current item.\n                itemDragging[0].focus();\n            }\n            proxy.remove();\n            proxy = null;\n            itemDragging.removeClass(config.itemMovingClass);\n            itemDragging = null;\n            dragStart = null;\n        };\n\n        /**\n         * Items can be moved and placed using certain keys.\n         * Tab for tabbing though and choose the item to be moved\n         * space, arrow-right arrow-down for moving current element forewards.\n         * arrow-right arrow-down for moving the current element backwards.\n         * @param {Object} e the event\n         * @param {jQuery} current the current moving item\n         */\n        var itemMovedByKeyboard = function(e, current) {\n            switch (e.keyCode) {\n                case keys.space:\n                case keys.arrowRight:\n                case keys.arrowDown:\n                    e.preventDefault();\n                    e.stopPropagation();\n                    var next = current.next();\n                    if (next.length) {\n                        next.insertBefore(current);\n                    }\n                    break;\n\n                case keys.arrowLeft:\n                case keys.arrowUp:\n                    e.preventDefault();\n                    e.stopPropagation();\n                    var prev = current.prev();\n                    if (prev.length) {\n                        prev.insertAfter(current);\n                    }\n                    break;\n            }\n        };\n\n        /**\n         * Get the x-position of the middle of the DOM node represented by the given jQuery object.\n         * @param {jQuery} jQuery wrapping a DOM node.\n         * @returns {number} Number the x-coordinate of the middle (left plus half outerWidth).\n         */\n        var midX = function(jQuery) {\n            return jQuery.offset().left + jQuery.outerWidth() / 2;\n        };\n\n        /**\n         * Get the y-position of the middle of the DOM node represented by the given jQuery object.\n         * @param {jQuery} jQuery wrapping a DOM node.\n         * @returns {number} Number the y-coordinate of the middle (top plus half outerHeight).\n         */\n        var midY = function(jQuery) {\n            return jQuery.offset().top + jQuery.outerHeight() / 2;\n        };\n\n        /**\n         * Calculate the distance between the centres of two elements.\n         * @param {Selector|Element|jQuery} element1 selector, element or jQuery.\n         * @param {Selector|Element|jQuery} element2 selector, element or jQuery.\n         * @return {number} number the distance in pixels.\n         */\n        var distanceBetweenElements = function(element1, element2) {\n            var e1 = $(element1);\n            var e2 = $(element2);\n            var dx = midX(e1) - midX(e2);\n            var dy = midY(e1) - midY(e2);\n            return Math.sqrt(dx * dx + dy * dy);\n        };\n\n        /**\n         * Get the current order of the list containing itemDragging.\n         * @returns {Array} Array of strings, the id of each element in order.\n         */\n        var getCurrentOrder = function() {\n            return (itemDragging || itemMoving).closest(config.list).find(config.item).map(\n                    function(index, item) {\n                        return config.idGetter(item);\n                    }).get();\n        };\n\n        /**\n         * Compare two arrays, which just contain simple values like ints or strings,\n         * to see if they are equal.\n         * @param {Array} a1 first array.\n         * @param {Array} a2 second array.\n         * @return {Boolean} boolean true if they both contain the same elements in the same order, else false.\n         */\n        var arrayEquals = function(a1, a2) {\n            return a1.length === a2.length &&\n                a1.every(function(v, i) {\n                    return v === a2[i];\n                });\n        };\n        config.itemInPage = combineSelectors(config.list, config.item);\n\n        // AJAX for section drag and click-to-move.\n        $(config.list).on('mousedown touchstart', config.item, function(event) {\n            var details = drag.prepare(event);\n            if (details.start) {\n                startDrag(event, details);\n            }\n        });\n\n        $(config.list).on('keydown', config.item, function(event) {\n            itemMoving = $(event.currentTarget).closest(config.itemInPage);\n            originalOrder = getCurrentOrder();\n            itemMovedByKeyboard(event, itemMoving);\n            var newOrder = getCurrentOrder();\n            if (!arrayEquals(originalOrder, newOrder)) {\n                // Order has changed, call the callback.\n                config.reorderDone(itemMoving.closest(config.list), itemMoving, newOrder);\n            }\n        });\n\n        // Make the items tabbable.\n        $(config.itemInPage).attr('tabindex', '0');\n    };\n});\n"],"names":["define","$","drag","keys","config","outer","inner","combined","dragStart","originalOrder","itemDragging","itemMoving","proxy","orderList","dragMove","list","closest","closestItem","closestDistance","find","item","each","index","element","distance","distanceBetweenElements","offsetValue","midY","window","console","log","insertBefore","insertAfter","updateProxy","items","count","length","i","attr","dragEnd","x","y","reorderEnd","newOrder","getCurrentOrder","arrayEquals","Date","getTime","time","Math","abs","focus","reorderDone","remove","removeClass","itemMovingClass","midX","jQuery","offset","left","outerWidth","top","outerHeight","element1","element2","e1","e2","dx","dy","sqrt","map","idGetter","get","a1","a2","every","v","itemInPage","split","forEach","firstSelector","secondSelector","push","trim","join","on","event","details","prepare","start","currentTarget","reorderStart","proxyHtml","replace","html","document","body","append","css","width","height","addClass","startDrag","e","current","keyCode","space","arrowRight","arrowDown","preventDefault","stopPropagation","next","arrowLeft","arrowUp","prev","itemMovedByKeyboard"],"mappings":"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"}